package main

import "fmt"

// Удаление элемента слайса

// Удалить i-ый элемент из слайса.
// Продемонстрируйте корректное удаление без утечки памяти.

// Подсказка: можно сдвинуть хвост слайса на место удаляемого элемента
// (copy(slice[i:], slice[i+1:])) и уменьшить длину слайса на 1.

//////////////////////////////////////////////////////////////////////////////
// 			объяснение про слайсы смотрел тут								//
// 			https://www.youtube.com/watch?v=ryHn-zHj7E8&t=720s				//
//																			//
// 			тут я выяснил что есть функция, которая удаляет					//
// 			slices.Delete(slices, i) // Go 1.21+							//
//																			//
// 			код, который решает эту задачку в лоб							//
// 			newSlice := []int{}												//
// 			newSlice = append(newSlice, slice[:i]...)						//
// 			newSlice = append(newSlice, slice[i+1:]...)						//
// 			fmt.Println(newSlice)											//
//////////////////////////////////////////////////////////////////////////////

func main() {
	slice := []int{1, 2, 3, 4, 5}
	i := 2

	// slice[:i] ==> [1 2]
	// slice[i+1] ==> [3 4 5]

	// slice[i:] ==> [3 4 5]
	// slice[i+1:] ==> [4 5]
	// copy ==> 4 5 5
	// slice ==> 1 2 4 5 5

	//a := []int{1, 2, 3, 4, 5}
	//copy(a, []int{10, 20, 30})
	//// a = 10, 20, 30, 4, 5

	copy(slice[i:], slice[i+1:])

	fmt.Println("после копирования", slice)

	slice[len(slice)-1] = 0      // берем последний элемент и переписываем его на 0 (для того чтобы, не было утечки памяти)
	slice = slice[:len(slice)-1] // берем весь слайс, кроме последнего элемента

	fmt.Println("результат", slice)
}

// способ подсмотрел у https://www.youtube.com/watch?v=ryHn-zHj7E8&t=720s
//func main() {
//	a := []int{1, 2, 3, 4, 5}
//	i := 2
//
//	withCopy := a[:i+copy(a[i:], a[i+1:])]
//	fmt.Println(withCopy)
//}
